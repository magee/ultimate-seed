/** @module ultimate.util.spec */

'use strict';

var _ = require('lodash');

/*

ultimate.util.spec.expand(true);
ultimate.util.spec.expand(1);
ultimate.util.spec.expand('*');

IF `something` is any of the following,
RETURN the entire `valids`:

  true
  1
  '*'
  ['*']
  { '*': <any> }

ELSE IF `something` is any of the following,
RETURN only the matched subset of `valids`:

  '<a valid in following>'

ELSE
RETURN `{}`.
FOR EXAMPLE:

  false
  0
  ''
  []
  {}




{
  verbs: {

  },
  roles: {

  },
  fields: {

  }
}

{
  'verbs': ['list', 'get', 'post', 'put', 'delete']
  'roles.': ['any', 'guest', 'user', 'admin']
}

*/

/*
require('./').util.spec.expand({
  a: 'b'
});

require('./').util.spec.expand();

require('./').util.spec.expand([1,2,3], [1, 2]);
*/

function Expander(something, valids, ignoreStar) {
  // Check params
  if (!_.isArray(valids)) {
    throw new Error('`valids` must be an array or array of arrays.');
  }
  valids.forEach(function (valid, i) {
    if (_.isString(valid)) {
      valids[i] = [valid];
    } else if (!_.isArray(valid)) {
      throw new Error('`valids` must be an array or array of arrays.');
    }
  });
  ignoreStar = !!ignoreStar;

  // Internal constants
  this.ALL = ignoreStar ? true : '*';
  this.NONE = null;

  // Internal variables
  this._something = something;
  this._arrayOfValids = valids;
  this._ignoreStar = ignoreStar;
}

Expander.prototype._arrayToObject = function (array, valueToAssign) {
  return _.transform(array, function (result, element) {
    result[element] = valueToAssign;
  });
};

Expander.prototype._expandBoolean = function (something) {
  return this.ALL;
};

Expander.prototype._expandString = function (something) {
  return this.ALL;
};

Expander.prototype._expandArray = function (something) {
  return this.ALL;
};

Expander.prototype._expandObject = function (something) {
  return this.ALL;
};

Expander.prototype._expandUnknown = function (something) {
  if (_.isBoolean(something)) {
    return this._expandBoolean(something);
  }
  if (_.isString(something)) {
    return this._expandString(something);
  }
  if (_.isArray(something)) {
    return this._expandArray(something);
  }
  if (_.isObject(something)) {
    return this._expandObject(something);
  }
  return this.NONE;
};

Expander.prototype.expand = function () {
  var result = {};
  this._arrayOfValids.forEach(function (valids) {
    var result = this._arrayToObject(valids, this.ALL);
    this._expandSomething(this.something);
  });
};

function expand(something, valids, ignoreStar) {
  var expander = new Expander(something, valids, ignoreStar);

  return expander.expand();
}

// Public API
exports.expand = expand;
